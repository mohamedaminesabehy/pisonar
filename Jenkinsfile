pipeline {
    agent any
    
    // D√©clencheurs automatiques pour GitHub
    triggers {
        githubPush()
        pollSCM('H/5 * * * *') // V√©rification toutes les 5 minutes comme fallback
    }
    
    // Variables d'environnement
    environment {
        // SonarQube configuration
        SONAR_SCANNER_HOME = tool 'SonarQubeScanner'
        SONAR_PROJECT_KEY = 'piweb'
        SONAR_PROJECT_NAME = 'piweb'
        SONAR_HOST_URL = 'http://localhost:9000'
        
        // GitHub repository
        GITHUB_REPO = 'https://github.com/mohamedaminesabehy/pisonar.git'
        
        // Node.js version
        NODE_VERSION = '20'
        
        // Build directories
        BACKEND_DIR = 'back'
        FRONTEND_DIR = 'front'
        
        // Credentials
        SONAR_TOKEN = credentials('sonar-token')
        GITHUB_TOKEN = credentials('github-token')
    }
    
    // Options du pipeline
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        skipStagesAfterUnstable()
        parallelsAlwaysFailFast()
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "üîÑ R√©cup√©ration du code source depuis GitHub..."
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'CleanBeforeCheckout'],
                                [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]
                            ],
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                credentialsId: 'github-token',
                                url: env.GITHUB_REPO
                            ]]
                        ])
                        
                        // Afficher les informations du commit
                        sh '''
                            echo "üìã Informations du commit:"
                            echo "Commit: $(git rev-parse HEAD)"
                            echo "Auteur: $(git log -1 --pretty=format:'%an <%ae>')"
                            echo "Message: $(git log -1 --pretty=format:'%s')"
                            echo "Date: $(git log -1 --pretty=format:'%cd')"
                        '''
                    } catch (Exception e) {
                        error "‚ùå √âchec lors du checkout: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    try {
                        echo "üîß Configuration de l'environnement..."
                        
                        // V√©rifier Node.js
                        sh '''
                            echo "üì¶ V√©rification de Node.js..."
                            node --version
                            npm --version
                        '''
                        
                        // V√©rifier la structure du projet
                        sh '''
                            echo "üìÅ Structure du projet:"
                            ls -la
                            echo "üìÅ Backend:"
                            ls -la back/ || echo "Dossier back non trouv√©"
                            echo "üìÅ Frontend:"
                            ls -la front/ || echo "Dossier front non trouv√©"
                        '''
                        
                        // V√©rifier SonarQube Scanner
                        sh '''
                            echo "üîç V√©rification de SonarQube Scanner..."
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner --version
                        '''
                        
                    } catch (Exception e) {
                        error "‚ùå √âchec de la configuration de l'environnement: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        script {
                            try {
                                echo "üì¶ Installation des d√©pendances backend..."
                                dir(env.BACKEND_DIR) {
                                    sh '''
                                        echo "üîÑ Installation des d√©pendances Node.js pour le backend..."
                                        npm ci --only=production
                                        echo "‚úÖ D√©pendances backend install√©es"
                                    '''
                                }
                            } catch (Exception e) {
                                error "‚ùå √âchec de l'installation des d√©pendances backend: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Frontend Dependencies') {
                    steps {
                        script {
                            try {
                                echo "üì¶ Installation des d√©pendances frontend..."
                                dir(env.FRONTEND_DIR) {
                                    sh '''
                                        echo "üîÑ Installation des d√©pendances Node.js pour le frontend..."
                                        npm ci
                                        echo "‚úÖ D√©pendances frontend install√©es"
                                    '''
                                }
                            } catch (Exception e) {
                                error "‚ùå √âchec de l'installation des d√©pendances frontend: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Code Quality Checks') {
            parallel {
                stage('Backend Linting') {
                    steps {
                        script {
                            try {
                                echo "üîç V√©rification de la qualit√© du code backend..."
                                dir(env.BACKEND_DIR) {
                                    sh '''
                                        echo "üîç Analyse statique du code backend..."
                                        # V√©rification de la syntaxe JavaScript
                                        find . -name "*.js" -not -path "./node_modules/*" -exec node -c {} \\;
                                        echo "‚úÖ Code backend valide"
                                    '''
                                }
                            } catch (Exception e) {
                                unstable "‚ö†Ô∏è Probl√®mes de qualit√© d√©tect√©s dans le backend: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Frontend Linting') {
                    steps {
                        script {
                            try {
                                echo "üîç V√©rification de la qualit√© du code frontend..."
                                dir(env.FRONTEND_DIR) {
                                    sh '''
                                        echo "üîç Linting du code frontend..."
                                        npm run lint || echo "‚ö†Ô∏è Avertissements de linting d√©tect√©s"
                                        echo "‚úÖ V√©rification frontend termin√©e"
                                    '''
                                }
                            } catch (Exception e) {
                                unstable "‚ö†Ô∏è Probl√®mes de qualit√© d√©tect√©s dans le frontend: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build') {
            parallel {
                stage('Backend Build') {
                    steps {
                        script {
                            try {
                                echo "üèóÔ∏è Construction du backend..."
                                dir(env.BACKEND_DIR) {
                                    sh '''
                                        echo "üèóÔ∏è Build du backend..."
                                        npm run build || echo "‚ÑπÔ∏è Pas de script de build pour le backend"
                                        echo "‚úÖ Backend pr√™t"
                                    '''
                                }
                            } catch (Exception e) {
                                error "‚ùå √âchec du build backend: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Frontend Build') {
                    steps {
                        script {
                            try {
                                echo "üèóÔ∏è Construction du frontend..."
                                dir(env.FRONTEND_DIR) {
                                    sh '''
                                        echo "üèóÔ∏è Build du frontend..."
                                        npm run build
                                        echo "‚úÖ Frontend construit avec succ√®s"
                                    '''
                                }
                            } catch (Exception e) {
                                error "‚ùå √âchec du build frontend: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        script {
                            try {
                                echo "üß™ Ex√©cution des tests backend..."
                                dir(env.BACKEND_DIR) {
                                    sh '''
                                        echo "üß™ Tests backend..."
                                        npm test || echo "‚ÑπÔ∏è Pas de tests configur√©s pour le backend"
                                        echo "‚úÖ Tests backend termin√©s"
                                    '''
                                }
                            } catch (Exception e) {
                                unstable "‚ö†Ô∏è √âchec des tests backend: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Frontend Tests') {
                    steps {
                        script {
                            try {
                                echo "üß™ Ex√©cution des tests frontend..."
                                dir(env.FRONTEND_DIR) {
                                    sh '''
                                        echo "üß™ Tests frontend..."
                                        npm test || echo "‚ÑπÔ∏è Pas de tests configur√©s pour le frontend"
                                        echo "‚úÖ Tests frontend termin√©s"
                                    '''
                                }
                            } catch (Exception e) {
                                unstable "‚ö†Ô∏è √âchec des tests frontend: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        echo "üîç D√©marrage de l'analyse SonarQube..."
                        
                        // Pr√©parer les param√®tres SonarQube
                        def sonarParams = [
                            "-Dsonar.projectKey=${env.SONAR_PROJECT_KEY}",
                            "-Dsonar.projectName=${env.SONAR_PROJECT_NAME}",
                            "-Dsonar.host.url=${env.SONAR_HOST_URL}",
                            "-Dsonar.login=${env.SONAR_TOKEN}",
                            "-Dsonar.sources=back/src,back/controllers,back/models,back/routes,back/middlewares,back/config,front/src",
                            "-Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/coverage/**,**/*.md,**/uploads/**,**/public/**,**/bin/**,**/views/**,**/*.twig,**/package-lock.json,**/yarn.lock",
                            "-Dsonar.javascript.file.suffixes=.js,.jsx",
                            "-Dsonar.typescript.file.suffixes=.ts,.tsx",
                            "-Dsonar.sourceEncoding=UTF-8",
                            "-Dsonar.scm.provider=git",
                            "-Dsonar.pullrequest.provider=github",
                            "-Dsonar.pullrequest.github.repository=mohamedaminesabehy/pisonar"
                        ]
                        
                        // Ajouter les informations de branche si disponibles
                        if (env.CHANGE_ID) {
                            sonarParams.addAll([
                                "-Dsonar.pullrequest.key=${env.CHANGE_ID}",
                                "-Dsonar.pullrequest.branch=${env.CHANGE_BRANCH}",
                                "-Dsonar.pullrequest.base=${env.CHANGE_TARGET}"
                            ])
                        } else {
                            sonarParams.add("-Dsonar.branch.name=${env.BRANCH_NAME}")
                        }
                        
                        // Ex√©cuter l'analyse SonarQube
                        withSonarQubeEnv('SonarQube') {
                            sh "${env.SONAR_SCANNER_HOME}/bin/sonar-scanner ${sonarParams.join(' ')}"
                        }
                        
                        echo "‚úÖ Analyse SonarQube termin√©e"
                        
                    } catch (Exception e) {
                        error "‚ùå √âchec de l'analyse SonarQube: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    try {
                        echo "üö™ V√©rification du Quality Gate..."
                        
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            
                            if (qg.status != 'OK') {
                                echo "‚ùå Quality Gate √©chou√©: ${qg.status}"
                                
                                // Afficher les d√©tails de l'√©chec
                                if (qg.conditions) {
                                    echo "üìä Conditions √©chou√©es:"
                                    qg.conditions.each { condition ->
                                        if (condition.status != 'OK') {
                                            echo "  - ${condition.metricKey}: ${condition.actualValue} (seuil: ${condition.errorThreshold})"
                                        }
                                    }
                                }
                                
                                error "‚ùå Le Quality Gate n'a pas √©t√© respect√©"
                            } else {
                                echo "‚úÖ Quality Gate r√©ussi!"
                            }
                        }
                        
                    } catch (Exception e) {
                        error "‚ùå √âchec de la v√©rification du Quality Gate: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    try {
                        echo "üîí Scan de s√©curit√©..."
                        
                        parallel(
                            "Backend Security": {
                                dir(env.BACKEND_DIR) {
                                    sh '''
                                        echo "üîí Audit de s√©curit√© backend..."
                                        npm audit --audit-level=high || echo "‚ö†Ô∏è Vuln√©rabilit√©s d√©tect√©es dans le backend"
                                    '''
                                }
                            },
                            "Frontend Security": {
                                dir(env.FRONTEND_DIR) {
                                    sh '''
                                        echo "üîí Audit de s√©curit√© frontend..."
                                        npm audit --audit-level=high || echo "‚ö†Ô∏è Vuln√©rabilit√©s d√©tect√©es dans le frontend"
                                    '''
                                }
                            }
                        )
                        
                        echo "‚úÖ Scan de s√©curit√© termin√©"
                        
                    } catch (Exception e) {
                        unstable "‚ö†Ô∏è Probl√®mes de s√©curit√© d√©tect√©s: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Nettoyage post-build..."
                
                // Archiver les artefacts importants
                archiveArtifacts artifacts: '**/build/**, **/dist/**, sonar-project.properties', 
                                fingerprint: true, 
                                allowEmptyArchive: true
                
                // Publier les r√©sultats de tests s'ils existent
                publishTestResults testResultsPattern: '**/test-results.xml', 
                                  allowEmptyResults: true
                
                // Nettoyer les node_modules pour √©conomiser l'espace
                sh '''
                    echo "üßπ Nettoyage des d√©pendances..."
                    find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
                    echo "‚úÖ Nettoyage termin√©"
                '''
            }
        }
        
        success {
            script {
                echo "üéâ Pipeline ex√©cut√© avec succ√®s!"
                
                // Notification de succ√®s (optionnel)
                if (env.CHANGE_ID) {
                    // Pour les Pull Requests
                    echo "‚úÖ PR #${env.CHANGE_ID} analys√©e avec succ√®s"
                } else {
                    // Pour les pushs sur main
                    echo "‚úÖ Branche ${env.BRANCH_NAME} analys√©e avec succ√®s"
                }
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline √©chou√©!"
                
                // Collecter les logs d'erreur
                sh '''
                    echo "üìã Collecte des logs d'erreur..."
                    find . -name "*.log" -type f -exec echo "=== {} ===" \\; -exec cat {} \\; 2>/dev/null || true
                '''
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline instable - des avertissements ont √©t√© d√©tect√©s"
            }
        }
        
        aborted {
            script {
                echo "üõë Pipeline interrompu"
            }
        }
    }
}