name: SonarQube Analysis

# Déclencheurs automatiques
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, reopened]

# Variables d'environnement globales
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sonarqube-analysis:
    name: SonarQube Code Analysis
    runs-on: ubuntu-latest
    
    # Timeout pour éviter les jobs qui traînent
    timeout-minutes: 30
    
    steps:
      # 1. Vérification et extraction du code source
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          # Récupère tout l'historique pour une analyse complète
          fetch-depth: 0
          # Token pour accéder aux dépôts privés si nécessaire
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Configuration de l'environnement Node.js
      - name: 🟢 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Pas de cache automatique car package-lock.json n'existe pas
          # Le cache sera géré manuellement par étape

      # 3. Configuration de l'environnement Java (requis pour SonarScanner)
      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. Cache des dépendances npm (Backend)
      - name: 💾 Cache Backend Dependencies
        uses: actions/cache@v4
        with:
          path: back/node_modules
          key: ${{ runner.os }}-backend-npm-${{ hashFiles('back/package.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-npm-

      # 5. Installation des dépendances Backend
      - name: 📦 Install Backend Dependencies
        working-directory: ./back
        run: |
          echo "🔧 Installing backend dependencies..."
          if [ ! -d "node_modules" ]; then
            npm install --prefer-offline --no-audit
          else
            echo "📦 Dependencies already cached, skipping installation"
          fi
          echo "✅ Backend dependencies ready"

      # 6. Cache des dépendances npm (Frontend)
      - name: 💾 Cache Frontend Dependencies
        uses: actions/cache@v4
        with:
          path: front/node_modules
          key: ${{ runner.os }}-frontend-npm-${{ hashFiles('front/package.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-npm-

      # 7. Installation des dépendances Frontend
      - name: 📦 Install Frontend Dependencies
        working-directory: ./front
        run: |
          echo "🔧 Installing frontend dependencies..."
          if [ ! -d "node_modules" ]; then
            npm install --prefer-offline --no-audit
          else
            echo "📦 Dependencies already cached, skipping installation"
          fi
          echo "✅ Frontend dependencies ready"

      # 8. Build du projet Frontend (optionnel mais recommandé)
      - name: 🏗️ Build Frontend Project
        working-directory: ./front
        run: |
          echo "🔨 Building frontend project..."
          npm run build
          echo "✅ Frontend build completed successfully"
        continue-on-error: true

      # 9. Installation et configuration de SonarScanner
      - name: 🔍 Setup SonarScanner CLI
        run: |
          echo "📥 Downloading and installing SonarScanner..."
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          sudo ln -sf /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
          echo "✅ SonarScanner installed successfully"
          sonar-scanner --version

      # 10. Validation des secrets requis
      - name: 🔐 Validate Required Secrets
        run: |
          echo "🔍 Validating required environment variables..."
          if [ -z "$SONAR_TOKEN" ]; then
            echo "❌ ERROR: SONAR_TOKEN secret is not set"
            exit 1
          fi
          if [ -z "$SONAR_HOST_URL" ]; then
            echo "❌ ERROR: SONAR_HOST_URL secret is not set"
            exit 1
          fi
          echo "✅ All required secrets are properly configured"

      # 11. Préparation des paramètres SonarQube
      - name: 📋 Prepare SonarQube Parameters
        run: |
          echo "📝 Preparing SonarQube analysis parameters..."
          
          # Création du fichier de configuration dynamique
          cat > sonar-project-ci.properties << EOF
          # Configuration SonarQube pour CI/CD
          sonar.projectKey=piweb
          sonar.projectName=Rescuify - Smart Medical Emergency Application
          sonar.projectVersion=1.0.0
          
          # Configuration du serveur SonarQube
          sonar.host.url=$SONAR_HOST_URL
          sonar.token=$SONAR_TOKEN
          
          # Sources et tests
          sonar.sources=back,front
          sonar.sourceEncoding=UTF-8
          
          # Exclusions optimisées pour les dépôts publics
          sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/coverage/**,**/*.md,**/uploads/**,**/*.log,**/.env*,**/docker-compose.yml,**/Dockerfile
          
          # Configuration spécifique JavaScript/TypeScript
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          
          # Paramètres de qualité
          sonar.qualitygate.wait=true
          sonar.qualitygate.timeout=300
          
          # Métadonnées Git pour l'analyse
          sonar.scm.provider=git
          sonar.scm.forceReloadAll=true
          
          # Configuration pour les dépôts publics GitHub
          sonar.pullrequest.provider=github
          sonar.pullrequest.github.repository=${{ github.repository }}
          EOF
          
          echo "✅ SonarQube configuration prepared"

      # 12. Exécution de l'analyse SonarQube
      - name: 🔍 Run SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "🚀 Starting SonarQube analysis..."
          
          # Configuration des paramètres pour Pull Request
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📋 Configuring for Pull Request analysis..."
            EXTRA_ARGS="-Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
                       -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
                       -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}"
          else
            echo "📋 Configuring for Branch analysis..."
            EXTRA_ARGS="-Dsonar.branch.name=${{ github.ref_name }}"
          fi
          
          # Exécution de l'analyse avec gestion d'erreurs
          set -e
          sonar-scanner \
            -Dproject.settings=sonar-project-ci.properties \
            -Dsonar.projectBaseDir=. \
            -Dsonar.working.directory=.sonarqube \
            $EXTRA_ARGS \
            -Dsonar.verbose=true
          
          echo "✅ SonarQube analysis completed successfully"

      # 13. Vérification du Quality Gate
      - name: 🎯 Check Quality Gate Status
        run: |
          echo "🔍 Checking Quality Gate status..."
          
          # Attendre que le Quality Gate soit évalué
          sleep 10
          
          # Note: Le statut du Quality Gate est automatiquement vérifié par sonar.qualitygate.wait=true
          echo "✅ Quality Gate verification completed"

      # 14. Nettoyage des fichiers temporaires
      - name: 🧹 Cleanup Temporary Files
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -rf .sonarqube/ || true
          rm -f sonar-project-ci.properties || true
          echo "✅ Cleanup completed"

  # Job de notification en cas d'échec
  notify-failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    if: failure()
    
    steps:
      - name: 📧 Send Failure Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            
            // Créer un commentaire sur la PR ou un issue
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.payload.pull_request.number,
                body: `## ❌ SonarQube Analysis Failed
                
                The SonarQube analysis has failed for this pull request.
                
                **Details:**
                - Workflow: \`${{ github.workflow }}\`
                - Run ID: \`${{ github.run_id }}\`
                - Commit: \`${{ github.sha }}\`
                
                Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
                
                🔧 **Common issues to check:**
                - SonarQube server connectivity
                - Authentication tokens
                - Code quality issues
                - Build failures`
              });
            }
            
            console.log('Failure notification sent successfully');

  # Job de notification en cas de succès
  notify-success:
    name: ✅ Notify on Success
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    if: success()
    
    steps:
      - name: 🎉 Send Success Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('✅ SonarQube analysis completed successfully!');
            
            // Optionnel: Ajouter un commentaire de succès sur les PR
            if (context.eventName === 'pull_request') {
              const { owner, repo } = context.repo;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.payload.pull_request.number,
                body: `## ✅ SonarQube Analysis Passed
                
                The SonarQube analysis has completed successfully! 🎉
                
                **Analysis Details:**
                - Project: \`piweb\`
                - Workflow: \`${{ github.workflow }}\`
                - Commit: \`${{ github.sha }}\`
                
                You can view the detailed results in your SonarQube dashboard.`
              });
            }