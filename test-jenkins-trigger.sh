#!/bin/bash

# üß™ Script de Test - D√©clenchement Pipeline Jenkins
# Usage: ./test-jenkins-trigger.sh [JENKINS_URL]

set -e

# Configuration
JENKINS_URL=${1:-"http://localhost:8080"}
WEBHOOK_URL="${JENKINS_URL}/github-webhook/"
REPO_URL="https://github.com/mohamedaminesabehy/pisonar.git"

echo "üöÄ Test de d√©clenchement Jenkins Pipeline"
echo "üìç Jenkins URL: $JENKINS_URL"
echo "üîó Webhook URL: $WEBHOOK_URL"
echo ""

# Test 1: V√©rification de la connectivit√© Jenkins
echo "üîç Test 1: Connectivit√© Jenkins..."
if curl -s -I "$JENKINS_URL" | grep -q "200\|302"; then
    echo "‚úÖ Jenkins accessible"
else
    echo "‚ùå Jenkins non accessible √† $JENKINS_URL"
    echo "üí° V√©rifiez que Jenkins est d√©marr√© et accessible"
    exit 1
fi

# Test 2: Test du webhook GitHub
echo ""
echo "üîç Test 2: Webhook GitHub..."
WEBHOOK_RESPONSE=$(curl -s -w "%{http_code}" -X POST "$WEBHOOK_URL" \
    -H "Content-Type: application/json" \
    -H "X-GitHub-Event: push" \
    -d '{
        "ref": "refs/heads/main",
        "after": "test123456789",
        "repository": {
            "clone_url": "'$REPO_URL'",
            "full_name": "mohamedaminesabehy/pisonar"
        },
        "pusher": {
            "name": "test-user"
        }
    }' -o /tmp/webhook_response.txt)

HTTP_CODE="${WEBHOOK_RESPONSE: -3}"
RESPONSE_BODY=$(cat /tmp/webhook_response.txt)

echo "üìä Code de r√©ponse: $HTTP_CODE"
echo "üìÑ R√©ponse: $RESPONSE_BODY"

if [[ "$HTTP_CODE" == "200" ]]; then
    echo "‚úÖ Webhook accept√© par Jenkins"
elif [[ "$HTTP_CODE" == "302" ]]; then
    echo "‚úÖ Webhook redirig√© (probablement OK)"
else
    echo "‚ùå Webhook √©chou√© (Code: $HTTP_CODE)"
    echo "üí° V√©rifiez la configuration du plugin GitHub dans Jenkins"
fi

# Test 3: V√©rification de l'API Jenkins
echo ""
echo "üîç Test 3: API Jenkins..."
API_RESPONSE=$(curl -s -w "%{http_code}" "$JENKINS_URL/api/json" -o /tmp/api_response.txt)
API_CODE="${API_RESPONSE: -3}"

if [[ "$API_CODE" == "200" ]]; then
    echo "‚úÖ API Jenkins accessible"
    # Extraire la version Jenkins si possible
    if command -v jq &> /dev/null; then
        JENKINS_VERSION=$(cat /tmp/api_response.txt | jq -r '.version // "unknown"')
        echo "üìã Version Jenkins: $JENKINS_VERSION"
    fi
elif [[ "$API_CODE" == "403" ]]; then
    echo "‚ö†Ô∏è API Jenkins accessible mais authentification requise"
else
    echo "‚ùå API Jenkins non accessible (Code: $API_CODE)"
fi

# Test 4: V√©rification des jobs
echo ""
echo "üîç Test 4: Recherche du job pisonar..."
JOBS_RESPONSE=$(curl -s "$JENKINS_URL/api/json?tree=jobs[name]")
if echo "$JOBS_RESPONSE" | grep -q "pisonar"; then
    echo "‚úÖ Job pisonar trouv√©"
else
    echo "‚ö†Ô∏è Job pisonar non trouv√©"
    echo "üí° Cr√©ez un job Pipeline nomm√© 'pisonar-pipeline' ou similaire"
fi

# Test 5: Test de connectivit√© GitHub
echo ""
echo "üîç Test 5: Connectivit√© GitHub..."
if curl -s -I "https://api.github.com/repos/mohamedaminesabehy/pisonar" | grep -q "200"; then
    echo "‚úÖ Repository GitHub accessible"
else
    echo "‚ùå Repository GitHub non accessible"
    echo "üí° V√©rifiez l'URL du repository"
fi

# R√©sum√©
echo ""
echo "üìã R√âSUM√â DES TESTS"
echo "=================="
echo "Jenkins accessible: $(curl -s -I "$JENKINS_URL" | grep -q "200\|302" && echo "‚úÖ" || echo "‚ùå")"
echo "Webhook fonctionnel: $([[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "302" ]] && echo "‚úÖ" || echo "‚ùå")"
echo "API Jenkins: $([[ "$API_CODE" == "200" || "$API_CODE" == "403" ]] && echo "‚úÖ" || echo "‚ùå")"
echo "GitHub accessible: $(curl -s -I "https://api.github.com/repos/mohamedaminesabehy/pisonar" | grep -q "200" && echo "‚úÖ" || echo "‚ùå")"

echo ""
echo "üîß ACTIONS RECOMMAND√âES"
echo "======================="

if [[ "$HTTP_CODE" != "200" && "$HTTP_CODE" != "302" ]]; then
    echo "1. V√©rifiez que le plugin GitHub est install√© dans Jenkins"
    echo "2. Configurez un job Pipeline avec le repository GitHub"
    echo "3. Activez 'GitHub hook trigger for GITScm polling'"
fi

if ! echo "$JOBS_RESPONSE" | grep -q "pisonar"; then
    echo "4. Cr√©ez un job Pipeline pour le projet pisonar"
fi

echo "5. Configurez le webhook dans GitHub:"
echo "   URL: $WEBHOOK_URL"
echo "   Content-Type: application/json"
echo "   Events: Push events"

echo ""
echo "üìö DOCUMENTATION"
echo "==============="
echo "Guide complet: jenkins-webhook-setup.md"
echo "D√©pannage: jenkins-troubleshooting.md"

# Nettoyage
rm -f /tmp/webhook_response.txt /tmp/api_response.txt

echo ""
echo "üéØ Test termin√©!"